name: Build and release kat

env:
  PROJECT_NAME: kat
  PROJECT_DESC: "Command line tool for interacting with the problem solving website Kattis."
  PROJECT_AUTH: "Viggo Gascou"

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    if: (github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release'))  || github.event_name == 'workflow_dispatch'
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            os_name: "Linux"
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: x86_64
            os_name: "Darwin"
          - os: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            os_name: "Darwin"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          override: true

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Initialise variables
        id: vars
        run: |
          PKG_DIR='_package'
          echo set-output name=PKG_DIR::${PKG_DIR}
          echo ::set-output name=PKG_DIR::${PKG_DIR}
          
          VERSION=v$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          echo set-output name=VERSION::${VERSION}
          echo ::set-output name=VERSION::${VERSION}
          
          PKG_BASENAME=${{ env.PROJECT_NAME }}-${VERSION}-${{ matrix.target }}
          echo set-output name=PKG_BASENAME::${PKG_BASENAME}
          echo ::set-output name=PKG_BASENAME::${PKG_BASENAME}

          PKG_NAME=${PKG_BASENAME}.tar.gz
          echo set-output name=PKG_NAME::${PKG_NAME}
          echo ::set-output name=PKG_NAME::${PKG_NAME}

      - name: Package
        shell: bash
        run: | 
          # setup dirs
          mkdir -p ${{ steps.vars.outputs.PKG_DIR }}
          mkdir -p ${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}
          mkdir -p ${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}/completions
          # copy binary
          cp target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }} ${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}/
          # copy README and LICENSE
          cp README.md ${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}/
          cp LICENSE ${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}/
          # copy completions --> bash, zsh fish
          cp 'target/${{ matrix.target }}/release/build/${{ env.PROJECT_NAME }}-'*/'out/${{ env.PROJECT_NAME }}.bash' '${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}/completions/'
          cp 'target/${{ matrix.target }}/release/build/${{ env.PROJECT_NAME }}-'*/'out/_${{ env.PROJECT_NAME }}' '${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}/completions/'
          cp 'target/${{ matrix.target }}/release/build/${{ env.PROJECT_NAME }}-'*/'out/${{ env.PROJECT_NAME }}.fish' '${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}/completions/'
          # compress package
          tar czf '${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_NAME }}' '${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_BASENAME }}'/*
      
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.vars.outputs.PKG_DIR }}/${{ steps.vars.outputs.PKG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
